/******************************/
/***  MODE 1 : Move Jogging ***/
/******************************/

Byte 0 : Start   	(0xFF)

Byte 1 : Mode    	(0x01 Move Jogging )

Byte 2 : Command 	[( Pan Up or Pan Down or Tilt Up or Tilt Down ) ( if 2 commands has to be sent , XOR them )]

Byte 3 : Data 1  	( Padding ) 0x00

Byte 4 : Data 2  	( Pan Speed )
	
Byte 5 : Data 3  	( Padding ) 0x00

Byte 6 : Data 4  	( Tilt Speed )
	
Byte 7 : Checksum	( excluding Sync )

Frame Structure of Move Jogging :
/******************************************************************************************************************************************************************************************/
/*|-----------||---------------------||----------------------||--------------------||-------------------------||---------------------||-------------------------||----------------------||*/
/*|	  Byte 0  ||	   Byte 1	     ||	  	  Byte 2		 ||	       Byte 3	   ||	      Byte 4	  	  ||	  	Byte 5	   	 ||	      Byte 6	  	    ||	  	  Byte 7	    ||*/
/*|-----------||---------------------||----------------------||--------------------||-------------------------||---------------------||-------------------------||----------------------||*/
/*|	   Sync   ||	    Mode 		 ||	   	 Command		 ||	       Data 1 	   ||	      Data 2	      ||	    Data 3 	     ||	      Data 4	        ||	   	  Checksum 	    ||*/
/*|-----------||---------------------||----------------------||--------------------||-------------------------||---------------------||-------------------------||----------------------||*/
/*| Always FF ||   0x01 -> Jogging   || 	 Command	 	 ||  	  Padding	   || Pan Speed(0x00 -> 0x3F) ||  	  	Padding	     || Tilt Speed(0x00 -> 0x3F)||    Excluding Sync    ||*/ 
/*|-----------||---------------------||----------------------||--------------------||-------------------------||---------------------||-------------------------||----------------------||*/
/******************************************************************************************************************************************************************************************/

Where command is 
				A- Pan Right  -> 0x02
				B- Pan Left	  -> 0x04
				C- Tilt Up 	  -> 0x08
				D- Tilt Down  -> 0x10
				E- Pan Right Tilt Up   -> 0x0A 
				F- Pan Right Tilt Down -> 0x12
				G- Pan Left  Tilt Up   -> 0x0C
				H- Pan Left  Tilt Down -> 0x14
				



/**************************************/
/***  MODE 2 : Move Angle Relative ****/
/**************************************/
				
Byte 0 : Start   	(0xFF)

Byte 1 : Mode    	( 0x02 Move Angle Relative )

Byte 2 : Command 	( In move Angle mode the command is always 0x00 ) OR ( Sign to indicate if Pan or Tilt are -ve )

Byte 3 : Data 1  	( Data_Pan_High ) 

Byte 4 : Data 2  	( Data_Pan_Low )
	
Byte 5 : Data 3  	( Data_Tilt_High ) 

Byte 6 : Data 4  	( Data_Tilt_Low )
	
Byte 7 : Checksum	( excluding Sync )

Frame Structure of Move Angle Relative :
/***********************************************************************************************************************************************************************************/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	  Byte 0  ||	   Byte 1	     ||	  	  Byte 2		 ||	       Byte 3	   ||	      Byte 4	  ||	  Byte 5	   	 ||	      Byte 6	     ||	  	  Byte 7	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	   Sync   ||	    Mode 		 ||	   	 Command		 ||	       Data 1 	   ||	      Data 2	  ||	   Data 3 	     ||	      Data 4	     ||	   	  Checksum 	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*| Always FF ||   0x02 -> Relative  || 	Angle of Sign 	 ||   Data_Pan_High	   ||     Data_Pan_Low    ||  	Data_Tilt_High   || 	Data_Tilt_Low    ||    Excluding Sync    ||*/ 
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/***********************************************************************************************************************************************************************************/

The User Should be able to Enter any angle in the GUI either positive or negative , but before sending it by the protocol this angle must be multiplied by 100 then pass it through the 2 byte filter

1- In the Move Angle frame, Byte 2 will indicate if Pan or Tilt are -ve, ex: 			PAN  	 TILT
																			0x00 -> 	+ve	  |  +ve
																			0x01 -> 	+ve	  |  -ve
																			0x02 ->		-ve	  |  +ve
																			0x03 -> 	-ve	  |  -ve
																			
2- two byte filter: 
					x_H = x / 255 ;
				 	x_L = x % 255 ;

/**************************************/
/***  MODE 3 : Move Angle Absolute ****/
/**************************************/
				
Byte 0 : Start   	(0xFF)

Byte 1 : Mode    	( 0x03 Move Angle Absolute )

Byte 2 : Command 	( In move Angle mode the command is always 0x00 ) OR ( Sign to indicate if Pan or Tilt are -ve )

Byte 3 : Data 1  	( Data_Pan_High ) 

Byte 4 : Data 2  	( Data_Pan_Low )
	
Byte 5 : Data 3  	( Data_Tilt_High ) 

Byte 6 : Data 4  	( Data_Tilt_Low )
	
Byte 7 : Checksum	( excluding Sync )

Frame Structure of Move Angle Absolute :
/***********************************************************************************************************************************************************************************/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	  Byte 0  ||	   Byte 1	     ||	  	  Byte 2		 ||	       Byte 3	   ||	      Byte 4	  ||	  Byte 5	   	 ||	      Byte 6	     ||	  	  Byte 7	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	   Sync   ||	    Mode 		 ||	   	  Command		 ||	       Data 1 	   ||	      Data 2	  ||	   Data 3 	     ||	      Data 4	     ||	   	  Checksum 	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*| Always FF ||   0x03 -> Absolute  || 	Angle of Sign 	 ||   Data_Pan_High	   ||     Data_Pan_Low    ||  	Data_Tilt_High   || 	Data_Tilt_Low    ||    Excluding Sync    ||*/ 
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/***********************************************************************************************************************************************************************************/

The User Should be able to Enter any angle in the GUI either positive or negative , but before sending it by the protocol this angle must be multiplied by 100 then pass it through the 2 byte filter

1- In the Move Angle frame, Byte 2 will indicate if Pan or Tilt are -ve, ex: 			PAN  	 TILT
																			0x00 -> 	+ve	  |  +ve
																			0x01 -> 	+ve	  |  -ve
																			0x02 ->		-ve	  |  +ve
																			0x03 -> 	-ve	  |  -ve
																			
2- two byte filter: 
					x_H = x / 255 ;
				 	x_L = x % 255 ;

/**************************/
/***  MODE 4 : Go Home ****/
/**************************/

Byte 0 : Start   	(0xFF)

Byte 1 : Mode    	(0x04 goHome)

Byte 2 : Command    (0x00)

Byte 3 : Padding    (0x00)

Byte 4 : Padding    (0x00)

Byte 5 : Padding    (0x00)

Byte 6 : Padding    (0x00)
	
Byte 7 : Checksum	( excluding Sync )

Frame Structure of Homing of Motors :
/***********************************************************************************************************************************************************************************/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	  Byte 0  ||	   Byte 1	     ||	  	  Byte 2		 ||	       Byte 3	   ||	      Byte 4	  ||	  Byte 5	   	 ||	      Byte 6	     ||	  	  Byte 7	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*|	   Sync   ||	    Mode 		 ||	   	  Command		 ||	       Data 1 	   ||	      Data 2	  ||	   Data 3 	     ||	      Data 4	     ||	   	  Checksum 	     ||*/
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/*| Always FF ||   0x04 -> goHome    ||		  Padding	     ||		  Padding	   ||	   Padding        ||	  Padding	     ||		  Padding	     ||    Excluding Sync    ||*/ 
/*|-----------||---------------------||----------------------||--------------------||---------------------||---------------------||----------------------||----------------------||*/
/***********************************************************************************************************************************************************************************/